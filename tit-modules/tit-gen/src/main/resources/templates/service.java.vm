package cn.sijay.${module}.service;

import cn.sijay.common.core.enums.ExceptionEnum;
import cn.sijay.common.core.exception.BaseException;
import cn.sijay.common.core.utils.StringUtil;
import cn.sijay.common.mybatis.base.IBaseService;
import cn.sijay.${module}.entity.${className};
import cn.sijay.${module}.dto.${className}Dto;
import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;
import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import jakarta.servlet.http.HttpServletResponse;
import org.apache.commons.lang3.ObjectUtils;
import org.springframework.web.multipart.MultipartFile;

/**
 * <strong>I${className}Service</strong>
 * <p>
 * ${comment}服务层
 * </p>
 *
 * @author ${author}
 * @since ${createTime}
 */
public interface I${className}Service extends IBaseService<${className},${className}Dto> {

    /**
     * 唯一性校验
     *
     * @param dto 待校验的对象
     */
    default void checkUnique(${className}Dto dto) {
    #foreach($field in $fields)
        #if($field.isUniqueKey())
        if (exists(new QueryWrapper<${className}>().eq("${field.columnName}", dto.${field.getterName}()))) {
            throw new BaseException(ExceptionEnum.VALIDATE_UNIQUE_ERROR, "${field.columnName}", dto.${field.getterName}());
        }
        #end
    #end
    }

    /**
     * 校验是否存在
     *
     * @param id 待校验的对象ID
     */
    default void exists(Long id) {
        if(!exists(new LambdaQueryWrapper<${className}>().eq(${className}::getId, id))){
          throw new BaseException(ExceptionEnum.DATA_NOT_FOUND, id);
        }
    }

    /**
     * 构建查询条件构造器
     *
     * @param dto 实体类
     * @return 查询条件构造器
     */
    default LambdaQueryWrapper<${className}> buildLambdaQueryWrapper(${className}Dto dto) {
        LambdaQueryWrapper<${className}> wrapper = new LambdaQueryWrapper<>();
        #foreach($field in $fields)
            #if($field.isQueryable())
                #if($field.queryType.code == 'between')
        wrapper.between(dto.${field.getterName}Start() != null && dto.${field.getterName}End() != null,
                        ${className}::${field.getterName} ,dto.${field.getterName}Start(), dto.${field.getterName}End());
                #else
                    #if($field.javaType.className == 'String')
                        #set($condition='StringUtil.isNotBlank(dto.'+${field.getterName}+'())')
                    #else
                        #set($condition='dto.'+${field.getterName}+'() != null')
                    #end
        wrapper.${field.queryType.code}(${condition}, ${className}::${field.getterName}, dto.${field.getterName}());
                #end
            #end
        #end
        #foreach($field in $fields)
            #if($field.fieldName=='sort'||$field.fieldName=='order')
        wrapper.orderByAsc(${className}::${field.getterName});
            #end
        #end
        return wrapper;
    }

    /**
     * 导入
     *
     * @param file 要导入的excel文件。
     * @return 是否导入成功
     */
    String importData(MultipartFile file);

    /**
     * 导出
     */
    void export(HttpServletResponse response);
}
