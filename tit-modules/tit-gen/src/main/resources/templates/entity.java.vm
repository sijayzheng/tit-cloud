package cn.sijay.${module}.entity;

import cn.sijay.common.core.utils.BeanUtil;
import cn.sijay.common.mybatis.annotation.QueryColumn;
import cn.sijay.common.mybatis.dictionary.QueryType;
import cn.sijay.common.web.base.${superClassName};
import cn.sijay.system.dto.${className}Dto;
import com.baomidou.mybatisplus.annotation.IdType;
import com.baomidou.mybatisplus.annotation.TableField;
import com.baomidou.mybatisplus.annotation.TableId;
import com.baomidou.mybatisplus.annotation.TableName;
import io.swagger.v3.oas.annotations.media.Schema;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.ToString;
import lombok.experimental.Accessors;

#foreach ($import in $imports)
import ${import};
#end
#if(!${superClass})
import java.io.Serial;
#end

/**
 * <strong>${className}</strong>
 * <p>
 * ${comment} 实体类
 * </p>
 *
 * @author ${author}
 * @since ${createTime}
 */
@Data
#if(${superClass})
@ToString(callSuper = true)
@EqualsAndHashCode(callSuper = true)
#end
@Accessors(chain = true)
@TableName("${tableName}")
@Schema(name = "${className}", title = "${comment}", description = "${comment}")
#if(${superClass})
public class ${className} extends ${superClassName} {
#else
public class ${className} implements Serializable {

    @Serial
    private static final long serialVersionUID = 1L;
#end

#foreach($field in $fields)
    #if(!$field.isSuperColumn())
    /**
     * ${field.columnComment}
     */
    @Schema(title = "${field.columnComment}")
            #if($field.isQueryable())
    @QueryColumn(QueryType.${field.queryType})
            #end
            #if($field.isPrimaryKey())
    @TableId(value = "${field.columnName}", type = IdType.AUTO)
            #else
    @TableField("${field.columnName}")
            #end
    private ${field.javaType.getClassName()} ${field.fieldName};

    #end
#end
#foreach($field in $fields)
    #if($field.isQueryable())
        #if($field.queryType.getCode() == 'between')
    /**
     * ${field.columnComment}开始
     */
    @TableField(exist = false)
    private ${field.javaType.getClassName()} ${field.fieldName}Start;

    /**
     * ${field.columnComment}结束
     */
    @TableField(exist = false)
    private ${field.javaType.getClassName()} ${field.fieldName}End;

        #end
    #end
#end

    public ${className}Dto to${className}Dto () {
        return BeanUtil.copyProperties(this, ${className}Dto.class);
    }
}
